!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDR	test/header.h	20;"	d
CC	Makefile	/^CC=gcc$/;"	m
DEPEND	Makefile	/^DEPEND=ruse.o filter.o logs.o main.o monitor.o send.o utils.o$/;"	m
GET_RUSE_LIST_URL	ruse.c	57;"	d	file:
GET_RUSE_NUM_URL	ruse.c	56;"	d	file:
HEADER_H	header.h	7;"	d
HEADER_H	test/header.h	7;"	d
INIT_LIST_HEAD	list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
IS_DAEMON_EXIST	main.c	3;"	d	file:
LIB	Makefile	/^LIB=-lpthread$/;"	m
LIST_HEAD	list.h	22;"	d
LIST_HEAD_INIT	list.h	20;"	d
MAKE	Makefile	/^MAKE=make$/;"	m
MAX_LINK_PACKET_SIZE	monitor.c	3;"	d	file:
ONCE_GET_RUSE_NUM	ruse.c	58;"	d	file:
PORT	test/header.h	19;"	d
REINJEC_NIC	header.h	38;"	d
RUSE_SERVER_HOST	ruse.c	54;"	d	file:
RUSE_SERVER_PORT	ruse.c	55;"	d	file:
SOURCE	Makefile	/^SOURCE=ruse.c filter.c logs.c main.c monitor.c send.c utils.c$/;"	m
TARGET	Makefile	/^TARGET=bpi.out$/;"	m
WRITE_LOG	header.h	35;"	d
_LINUX_LIST_H	list.h	2;"	d
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
check_sum	utils.c	/^unsigned short check_sum(unsigned short *addr,int len)$/;"	f
check_sum_ip	utils.c	/^unsigned short check_sum_ip(struct ip* ip)$/;"	f
check_sum_tcp	utils.c	/^unsigned short check_sum_tcp(struct ip* ip, struct tcphdr* tcp)$/;"	f
conn_ruse_server	ruse.c	/^int conn_ruse_server()$/;"	f
count	monitor.c	/^static unsigned int count = 0;$/;"	v	file:
filter_http	filter.c	/^int filter_http(char* data, char* domain)$/;"	f
filter_thread	filter.c	/^void* filter_thread(void* lp)$/;"	f
get_http_head	filter.c	/^int get_http_head(char *data, char* domain, char* value)$/;"	f
get_http_res	ruse.c	/^char* get_http_res(int sockfd, char* ques)$/;"	f
init_nic	utils.c	/^int init_nic(char *reinjec_nic)$/;"	f
init_ruse	ruse.c	/^int init_ruse()$/;"	f
js	ruse.c	/^	char* js;$/;"	m	struct:ruse_node	file:
link_packet	header.h	/^struct link_packet{$/;"	s
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_for_each	list.h	112;"	d
list_for_each_prev	list.h	120;"	d
list_head	list.h	/^struct list_head {$/;"	s
log_day	logs.c	/^int				log_day;			\/\/ 当前log文件对应的日期-天$/;"	v
log_name	logs.c	/^char			log_name[32];		\/\/ log文件前缀名$/;"	v
logs_buf	logs.c	/^static char logs_buf[8192];			\/\/ log内容$/;"	v	file:
logs_create	logs.c	/^int logs_create()$/;"	f
logs_destroy	logs.c	/^void logs_destroy()$/;"	f
logs_fd	logs.c	/^int				logs_fd		= 0;	\/\/ 文件描述符$/;"	v
logs_init	logs.c	/^int logs_init(char* prefix)$/;"	f
logs_lock	logs.c	/^pthread_mutex_t logs_lock;			\/\/ log写入全局互斥锁$/;"	v
logs_mytime	logs.c	/^static struct tm *logs_mytime;		\/\/ log时间$/;"	v	typeref:struct:tm	file:
logs_ret	logs.c	/^static int logs_strlen,logs_ret;	\/\/$/;"	v	file:
logs_strlen	logs.c	/^static int logs_strlen,logs_ret;	\/\/$/;"	v	file:
logs_temp	logs.c	/^static char logs_temp[8192];		\/\/ log内容临时存放$/;"	v	file:
logs_tm	logs.c	/^static time_t logs_tm;				\/\/ log时间$/;"	v	file:
main	main.c	/^int main(int argc, char** argv)$/;"	f
main	test/recvbag/main.c	/^int main(int argc, char** argv)$/;"	f
main	test/sendbag/main.c	/^int main(int argc, char** argv)$/;"	f
monitor_thread	monitor.c	/^void monitor_thread()$/;"	f
next	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
node	ruse.c	/^	struct list_head node;$/;"	m	struct:ruse_node	typeref:struct:ruse_node::list_head	file:
packet	header.h	/^	unsigned char* packet;$/;"	m	struct:link_packet
packet_len	header.h	/^	unsigned int packet_len;$/;"	m	struct:link_packet
prev	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
printf_time	test/utils.c	/^void printf_time()$/;"	f
recv_block	ruse.c	/^int recv_block(int sock, unsigned char *buf, int len\/*, int block_flag*\/)$/;"	f
reinjec_mac	filter.c	/^unsigned char reinjec_mac[6] = {0};$/;"	v
reinjec_mtu	filter.c	/^short reinjec_mtu = 0;$/;"	v
reinjec_test	send.c	/^int reinjec_test(unsigned char* buf, int len, struct sockaddr_in* toaddr, unsigned int toaddr_len)$/;"	f
run	main.c	/^void run()$/;"	f
ruse_list_add	ruse.c	/^void ruse_list_add(char* url, char* js)$/;"	f
ruse_list_count	ruse.c	/^static int ruse_list_count = 0;$/;"	v	file:
ruse_list_find	ruse.c	/^char* ruse_list_find(char* url)$/;"	f
ruse_list_head	ruse.c	/^LIST_HEAD(ruse_list_head);$/;"	v
ruse_list_size	ruse.c	/^static unsigned int ruse_list_size = sizeof(struct ruse_node);$/;"	v	file:
ruse_node	ruse.c	/^struct ruse_node{$/;"	s	file:
send_block	ruse.c	/^int send_block(int sock, unsigned char *buf, int len)$/;"	f
send_http	send.c	/^void send_http(struct ip* s_ip, struct tcphdr* s_tcp, unsigned int data_len, char* res_str)$/;"	f
send_rst_test	send.c	/^void send_rst_test(struct ip* s_ip, struct tcphdr* s_tcp, unsigned int data_len)$/;"	f
sizeof_ethhdr	filter.c	/^unsigned int sizeof_ethhdr = sizeof(struct ethhdr);$/;"	v
sizeof_iphdr	filter.c	/^unsigned int sizeof_iphdr = sizeof(struct ip);$/;"	v
sizeof_tcphdr	filter.c	/^unsigned int sizeof_tcphdr = sizeof(struct tcphdr);$/;"	v
url	ruse.c	/^	char* url;$/;"	m	struct:ruse_node	file:
xyprintf	logs.c	/^int xyprintf(int err_no, char* format, ...)$/;"	f
xyprintf_data	utils.c	/^void xyprintf_data(unsigned char* data, int len)$/;"	f
xyprintf_ethhdr	utils.c	/^void xyprintf_ethhdr(struct ethhdr* ethhdr)$/;"	f
xyprintf_iphdr	utils.c	/^void xyprintf_iphdr(struct ip *ip)$/;"	f
xyprintf_sockaddr_ll	utils.c	/^void xyprintf_sockaddr_ll(struct sockaddr_ll* ll)$/;"	f
xyprintf_tcphdr	utils.c	/^void xyprintf_tcphdr(struct tcphdr* tcp)$/;"	f
